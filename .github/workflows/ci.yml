name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests with coverage (excluding integration tests)
      run: |
        poetry run pytest tests/ -m "not integration" --cov=src --cov=tools --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run black
      run: poetry run black --check src/ tools/ tests/

    - name: Run isort
      run: poetry run isort --check-only src/ tools/ tests/

    # - name: Run flake8
    #   run: poetry run flake8 src/ tools/ tests/

    - name: Run mypy
      run: poetry run mypy src/ tools/

  integration-test:
    runs-on: ubuntu-latest
    # Run integration tests only on main branch to save CI time
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh

    - name: Start Ollama and pull models
      run: |
        # Start Ollama service
        ollama serve &
        sleep 5  # Give Ollama time to start

        # Pull TinyLlama for fast CI tests
        echo "Pulling TinyLlama model for tests..."
        ollama pull tinyllama:1.1b || echo "Warning: Failed to pull model"

        # Verify models were pulled successfully
        echo "Available models:"
        ollama list

    - name: Run integration tests
      run: |
        poetry run pytest tests/ -m "integration" -v --tb=short
      continue-on-error: true  # Don't fail CI if integration tests fail

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Build package
      run: poetry build

    - name: Check dist contents
      run: |
        ls -la dist/
        poetry run pip install dist/*.whl
        poetry run validated-llm-prompt2task --help

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
